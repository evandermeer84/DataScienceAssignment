--We are running an experiment at an item-level, which means all users who visit will see the same page, but the layout of different item pages may differ.
--Compare this table to the assignment events we captured for user_level_testing.
--Does this table have everything you need to compute metrics like 30-day view-binary?

SELECT 
  * 
FROM 
  dsv1069.final_assignments_qa
  
  -- We need the date to copute metrics like 30-day view binary, we need to know when these things happened 
  
  
  --Reformat the final_assignments_qa to look like the final_assignments table, filling in any missing values with a placeholder of the appropriate data type.

SELECT item_id,
       test_a AS test_assignment,
       'test_a' AS test_number,
       CAST('now' AS timestamp) AS test_start_date
FROM dsv1069.final_assignments_qa
UNION ALL
SELECT item_id,
       test_b AS test_assignment,
       'test_b' AS test_number,
       CAST('now' AS timestamp) AS dummy_test_start_date
FROM dsv1069.final_assignments_qa
UNION ALL
SELECT item_id,
       test_c AS test_assignment,
       'test_c' AS test_number,
       CAST('now' AS timestamp) AS dummy_test_start_date
FROM dsv1069.final_assignments_qa
UNION ALL
SELECT item_id,
       test_d AS test_assignment,
       'test_d' AS test_number,
       CAST('now' AS timestamp) AS dummy_test_start_date
FROM dsv1069.final_assignments_qa
UNION ALL
SELECT item_id,
       test_e AS test_assignment,
       'test_e' AS test_number,
       CAST('now' AS timestamp) AS dummy_test_start_date
FROM dsv1069.final_assignments_qa
UNION ALL
SELECT item_id,
       test_f AS test_assignment,
       'test_f' AS test_number,
       CAST('now' AS timestamp) AS dummy_test_start_date
FROM dsv1069.final_assignments_qa





-- Use this table to 
-- compute order_binary for the 30 day window after the test_start_date
-- for the test named item_test_2

SELECT 
  order_binary.test_assignment,
  COUNT(DISTINCT order_binary.item_id) AS num_orders,
  SUM(order_binary.orders_bin_30d) AS sum_orders_bin_30d
FROM
  (SELECT 
    final_ass.item_id,
    final_ass.test_assignment,
    MAX(CASE WHEN (DATE(orders.created_at)-DATE(final_ass.test_start_date)) <= 30 THEN 1
        ELSE 0
        END) AS orders_bin_30d
   FROM dsv1069.final_assignments AS final_ass
   LEFT JOIN dsv1069.orders AS orders
     ON final_ass.item_id = orders.item_id
   WHERE final_ass.test_number = 'item_test_2'
   GROUP BY 
     final_ass.item_id,
     final_ass.test_assignment
  ) as order_binary
GROUP BY order_binary.test_assignment






-- Use this table to 
-- compute view_binary for the 30 day window after the test_start_date
-- for the test named item_test_2




SELECT 
  view_binary.test_assignment,
  COUNT(DISTINCT view_binary.item_id) AS num_views,
  SUM(view_binary.views_bin_30d) AS sum_views_bin_30d,
  AVG(view_binary.views_bin_30d) AS avg_view_bin_30d
FROM
  (SELECT 
    final_ass.item_id,
    final_ass.test_assignment,
    MAX(CASE WHEN (DATE(views.event_time)-DATE(final_ass.test_start_date)) <= 30 THEN 1
        ELSE 0
        END) AS views_bin_30d
   FROM dsv1069.final_assignments AS final_ass
   LEFT JOIN dsv1069.view_item_events AS views
     ON final_ass.item_id = views.item_id
   WHERE final_ass.test_number = 'item_test_2'
   GROUP BY 
     final_ass.item_id,
     final_ass.test_assignment
  ) as view_binary
GROUP BY view_binary.test_assignment





--Use the https://thumbtack.github.io/abba/demo/abba.html to compute the lifts in metrics and the p-values for the binary metrics ( 30 day order binary and 30 day view binary) using a interval 95% confidence. 

SELECT
COUNT(DISTINCT binary_orders.user_id),
test_assignment 
FROM
(SELECT 
    *
   FROM dsv1069.final_assignments AS final_ass
   LEFT JOIN dsv1069.orders AS orders
     ON final_ass.item_id = orders.item_id
   WHERE final_ass.test_number = 'item_test_2'
   ) as binary_orders
   GROUP BY test_assignment
